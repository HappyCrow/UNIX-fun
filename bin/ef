#!/usr/bin/env ocamlscript
Ocaml.packs := ["batteries";"dolog";"cpm"]
--
(* Enrichment Factor (EF) calculation utility

   read 'score:float label:int' on each stdin line, then output
   ROC_AUC, BEDROC_AUC and EF at 1,2 and 5%
   label must be 1 for actives, 0 for decoys.
   The file must already having been sorted properly
   (by decreasing scores usually, unless those are docking scores). *)

open Printf

module A = BatArray
module L = BatList
module Log = Dolog.Log

(* score-label *)
module SL = struct
  type t = float * bool

  let get_score = fst

  let get_label = snd

  let of_string l =
    try Scanf.sscanf l "%f %d" (fun score int_label -> match int_label with
        | 1 -> (score, true)
        | 0 -> (score, false)
        | x -> failwith (sprintf "SL.of_string: unexpected label: %s" l))
    with exn ->
      (Log.fatal "SL.of_string: cannot parse: %s" l;
       raise exn)
end

module ROC = Cpm.MakeROC.Make(SL)

let main () =
  Log.(set_log_level INFO);
  Log.color_on ();
  let score_labels =
    let all_lines, exn =
      L.unfold_exc (fun () -> SL.of_string (input_line stdin)) in
    assert(exn = End_of_file);
    A.of_list all_lines in
  let auc = ROC.fast_auc_a score_labels in
  let bedroc = ROC.fast_bedroc_auc_a score_labels in
  let ef1 = ROC.fast_enrichment_factor 0.01 score_labels in
  let ef2 = ROC.fast_enrichment_factor 0.02 score_labels in
  let ef5 = ROC.fast_enrichment_factor 0.05 score_labels in
  printf "AUC: %.3f BEDROC: %.3f EF1,2,5%%: %.2f %.2f %.2f\n"
    auc bedroc ef1 ef2 ef5

let () = main ()
